#Import Cac Thu Vien
import tensorflow as tf
import string
import sys
import os
import pandas as pd
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt

from PIL import Image
from math import log
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.utils import to_categorical
from keras.layers import Dropout
from pandas import read_csv
from keras.models import Sequential
from keras.layers import Dense
from keras.wrappers.scikit_learn import KerasClassifier
from keras.optimizers import SGD
from sklearn.model_selection import cross_val_score
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import StratifiedKFold
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from gensim.models import Word2Vec

import warnings;
warnings.filterwarnings('ignore')


t = ["../trainLabels/trainLabels1.csv", "../trainLabels/trainLabels2.csv", "../trainLabels/trainLabels3.csv", "../trainLabels/trainLabels4.csv"]
#t = ["trainTEST.csv"]

for bien in t:
    print("-----------  ", bien,"  --------------")
    
    data = pd.read_csv(bien, delimiter=',')
    X = data['Id']
    Y = data['Class']
    
    root='../train'
    files=os.listdir(root)
    # Khởi tạo mảng chứa các vector(size = 65536) rút chích đăc trưng từ mỗi con malware
    dataVector = []    
    counts = 0;     # Biến đếm tiến trình 
    
    # Mở và đọc file theo thứ tự trong X
    for name in X:
        print('\ncounts : ',counts,"---> ",name)
        f=open(root+'/'+name+'.bytes')
        # Khởi biến chứa nội dung file đọc được
        corpus_raw0 =''
        for line in f:
            line=line.replace('CC CC CC CC CC', '', 3)
            line=line.replace('00 00 00 00 00', '', 3)
            
            line=line.replace('CC CC CC', 'CC', 2)
            line=line.replace('00 00 00', '00', 2)
            
            chay = len(line.split())
            if(chay<=4):
                line=line.replace('CC', '', 3)
                line=line.replace('00', '', 3)
                
            corpus_raw0 += line
        
        raw_sentence = corpus_raw0.split('\n')
        sentences = []        
        
        for sentence in raw_sentence:
            temp=[]
            
            for w in sentence.split()[1:]:
                if ((w!='') and (w!='??')):
                    temp.append(w.lower())
            if((temp==[])): continue
            else: sentences.append(temp)
                
        print(len(sentences))
        
        if(len(sentences)==0): continue; # nếu ngữ liệu rỗng thì bỏ qua! 
        
        model = Word2Vec( sentences ,size = 256, min_count = 1, window=8, iter=4)
        #model.train( sentences , epochs= 2, total_examples = model.corpus_count )
        #model.init_sims(replace=True)
        
        print(model)
            
        # extract all vectors(trích xuất tất cả các vector of bytes)
        words = list(model.wv.vocab)     # Biến đổi lại thành list từ vựng
        words.sort()    # Sắp xếp từ vựng lại theo thứ tự từ 00 -> ff
        
        # Tạo thành ma trận 256x256 từ word vector of byte và các bytes
        Ms = []
        for i in words:
            Ms.append(model[i])
        m = np.asmatrix(Ms)
        #print("\nShape of Ms: ",m.shape)
        
        # Normalize the elements of the matrix Ms (Chuẩn hóa)
        #minMs = m.min()
        #maxMs = m.max()
        #newMs = (((m-minMs)*255)/(maxMs-minMs)).astype(int)
    
        #print(maxMs, minMs)
        
        # Chuyển Matrix sang hình ảnh thang độ xám
        
        #img = Image.fromarray(np.uint8(newMs))
        #img.save('../ketqua/imgF/'+str(Y.iloc[counts])+'/'+name+'.png',"PNG")
        
        # Chuyển matrix 256x256 thành vector(size = 65536)
        """
        vector_temp = (np.array(m).flatten())
        dataVector.append(vector_temp)
        
        dtCSV = pd.DataFrame(vector_temp)
        #Xử lý những giá trị 'null' thành 0 trong DataFrame lại
        for i in dtCSV.columns:
            dtCSV[i].fillna(0, inplace = True)
        
        dtCSV.to_csv('../ketqua/dataFrame/'+str(name), index=False)
        
        """
        counts+=1
        f.close()
    
    #Gán nhãn cho mỗi con malware theo thứ tự
    DataCSV = pd.DataFrame(dataVector)
    DataCSV['Class'] = pd.Series(Y, index = DataCSV.index)
    
    #Xử lý những giá trị 'null' thành 0 trong DataFrame lại
    for i in DataCSV.columns:
        DataCSV[i].fillna(0, inplace = True)
        
    # Lưu kết quả lại thành file .csv
    DataCSV.to_csv('../ketqua/dataF/Data'+str(bien), index=False)
    
    print('word vector dimension: ', DataCSV.shape)
    print(DataCSV.head(5))
       

print("--------------- [The end] ------------------")

